{"ast":null,"code":"/* eslint-disable @typescript-eslint/restrict-plus-operands */\n\n/* eslint-disable no-return-await */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\n\n/* eslint-disable @typescript-eslint/no-unsafe-return */\nexport default async function addToCart(root, {\n  productId\n}, context) {\n  console.log('ADDING TO CART!!'); // 1 query the current user and see if signed in\n\n  const sesh = context.session;\n\n  if (!sesh.itemId) {\n    throw new Error('You must be logged in to do this');\n  } // 2 query the current users cart\n\n\n  const allCartItems = await context.lists.CartItem.findMany({\n    where: {\n      user: {\n        id: sesh.itemId\n      },\n      product: {\n        id: productId\n      }\n    },\n    resolveFields: 'id,quantity' // what you want back\n\n  });\n  const [existingCartItem] = allCartItems; // destructures first item in array of allCartItems\n  // 3 see if item being added is already in cart\n\n  if (existingCartItem) {\n    console.log(`there are already ${existingCartItem.quantity}, increment by 1`); // 4 if it is increment by 1\n\n    return await context.lists.CartItem.updateOne({\n      id: existingCartItem.id,\n      data: {\n        quantity: existingCartItem.quantity + 1\n      }\n    });\n  } // 5 if it isnt create new cart item\n\n\n  return await context.lists.CartItem.createOne({\n    data: {\n      product: {\n        connect: {\n          id: productId\n        }\n      },\n      user: {\n        connect: {\n          id: sesh.itemId\n        }\n      }\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}