{"ast":null,"code":"import { config, createSchema } from '@keystone-next/keystone/schema';\nimport { createAuth } from '@keystone-next/auth';\nimport { withItemData, statelessSessions } from '@keystone-next/keystone/session';\nimport 'dotenv/config';\nimport { User } from './schemas/User';\nimport { Product } from './schemas/Product';\nimport { ProductImage } from './schemas/ProductImage';\nimport { CartItem } from './schemas/CartItem';\nimport { insertSeedData } from './seed-data';\nimport { sendPasswordResetEmail } from './lib/mail';\nimport { extendGraphqlSchema } from './mutations/index';\nimport { OrderItem } from './schemas/OrderItem';\nimport { Order } from './schemas/Order';\nimport { Role } from './schemas/Role';\nimport { permissionList } from './schemas/fields';\nconst databaseURL = process.env.DATABASE_URL || 'mongo://localhost/keystone-mock-store';\nconst sessionConfig = {\n  maxAge: 60 * 60 * 24 * 360,\n  // how long should they stay signed in?\n  secret: process.env.COOKIE_SECRET\n};\nconst {\n  withAuth\n} = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  secretField: 'password',\n  initFirstItem: {\n    fields: ['name', 'email', 'password'] // TODO: add in initial roles here\n\n  },\n  passwordResetLink: {\n    async sendToken(args) {\n      // send the email\n      await sendPasswordResetEmail(args.token, args.identity);\n    }\n\n  }\n});\nexport default withAuth(config({\n  server: {\n    cors: {\n      origin: [process.env.FRONTEND_URL],\n      credentials: true\n    },\n    port: parseInt(process.env.PORT) || 3000\n  },\n  db: {\n    adapter: 'mongoose',\n    url: databaseURL,\n\n    async onConnect(keystone) {\n      console.log('connected to the database');\n\n      if (process.argv.includes('--seed-data')) {\n        await insertSeedData(keystone);\n      }\n    }\n\n  },\n  lists: createSchema({\n    // schema items go in here\n    User,\n    Product,\n    ProductImage,\n    CartItem,\n    OrderItem,\n    Order,\n    Role\n  }),\n  extendGraphqlSchema,\n  ui: {\n    // show ui only for people who pass this test\n    isAccessAllowed: ({\n      session\n    }) => // console.log(session);\n    !!(session === null || session === void 0 ? void 0 : session.data)\n  },\n  session: withItemData(statelessSessions(sessionConfig), {\n    // GraphQL query\n    // changes permissionList array of keys into string to query\n    User: `id name email role { ${permissionList.join(' ')} }`\n  })\n}));","map":null,"metadata":{},"sourceType":"module"}