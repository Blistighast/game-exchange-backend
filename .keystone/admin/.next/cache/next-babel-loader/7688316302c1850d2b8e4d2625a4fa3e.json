{"ast":null,"code":"/* eslint-disable @typescript-eslint/restrict-plus-operands */\n\n/* eslint-disable no-return-await */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\n\n/* eslint-disable @typescript-eslint/no-unsafe-return */\nimport stripeConfig from '../lib/stripe';\nconst graphql = String.raw;\nexport default async function checkout(root, {\n  token\n}, context) {\n  // 1 make sure they are signed in\n  const userId = context.session.itemId;\n\n  if (!userId) {\n    throw new Error('Sorry! You must be signed in to create an order.');\n  } // 1.5 query the current user\n\n\n  const user = await context.lists.User.findOne({\n    where: {\n      id: userId\n    },\n    resolveFields: graphql`\n      id\n      name\n      email\n      cart {\n        id\n        quantity\n        product {\n          name\n          price\n          description\n          id\n          photo {\n            id\n            image {\n              id\n              publicUrlTransformed\n            }\n          }\n        }\n      }\n    `\n  });\n  console.dir(user, {\n    depth: null\n  }); // 2 calculate the total price for their order\n  // below checks if item was deleted since being added to the cart\n\n  const cartItems = user.cart.filter(cartItem => cartItem.product);\n  const amount = cartItems.reduce(function (tally, cartItem) {\n    return tally + cartItem.quantity * cartItem.product.price;\n  }, 0);\n  console.log(amount); // 3 create the charge with the stripe library\n\n  const charge = await stripeConfig.paymentIntents.create({\n    amount,\n    currency: 'USD',\n    confirm: true,\n    payment_method: token\n  }).catch(err => {\n    console.log(err);\n    throw new Error(err.message);\n  });\n  console.log(charge); // 4 convert the cart items to order items\n\n  const orderItems = cartItems.map(cartItem => {\n    const orderItem = {\n      name: cartItem.product.name,\n      description: cartItem.product.description,\n      price: cartItem.product.price,\n      quantity: cartItem.quantity,\n      photo: {\n        connect: {\n          id: cartItem.product.photo.id\n        }\n      }\n    };\n    return orderItem;\n  }); // 5 create the order and return it\n\n  const order = await context.lists.Order.createOne({\n    data: {\n      total: charge.amount,\n      charge: charge.id,\n      items: {\n        create: orderItems\n      },\n      user: {\n        connect: {\n          id: userId\n        }\n      }\n    }\n  }); // 6 clean up any old cart items\n\n  const cartItemIds = user.cart.map(cartItem => cartItem.id);\n  await context.lists.CartItem.deleteMany({\n    ids: cartItemIds\n  });\n  return order;\n}","map":null,"metadata":{},"sourceType":"module"}