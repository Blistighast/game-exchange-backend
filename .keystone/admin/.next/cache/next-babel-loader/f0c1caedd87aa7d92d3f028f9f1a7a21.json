{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// At its simplest access control returns a yes or no value depending on the users session\nimport { permissionList } from './schemas/fields'; // !! takes falsy or truthy values and coerces them into \"true\" booleans true and false\n\nexport function isSignedIn({\n  session\n}) {\n  // if session is undefined the !! makes it return false\n  return !!session;\n} // fromEntries takes an array of key values and turns into an object\n// ex:\n// Object.fromEntries([['name', 'Brian']])\n// returns {name: 'Brian'}\n\nconst generatedPermissions = Object.fromEntries(permissionList.map(permission => [permission, // the key\nfunction ({\n  session\n}) {\n  var _session$data$role;\n\n  // the value\n  return !!(session === null || session === void 0 ? void 0 : (_session$data$role = session.data.role) === null || _session$data$role === void 0 ? void 0 : _session$data$role[permission]);\n}])); // Permissions check if someone meets a criteria, yes or no\n\nexport const permissions = _objectSpread({}, generatedPermissions); // rule based functions\n// rules can return a boolean or a filter which limits which propducts they can CRUD\n\nexport const rules = {\n  canManageProducts({\n    session\n  }) {\n    if (!isSignedIn({\n      session\n    })) {\n      return false;\n    } // 1 do they have permission of canManageProducts\n\n\n    if (permissions.canManageProducts({\n      session\n    })) {\n      return true;\n    } // 2 if not do they own this item?\\\n    // below is \"where\" filter in graphQL \"where user is owner of product\"\n\n\n    return {\n      user: {\n        id: session.itemId\n      }\n    };\n  },\n\n  canOrder({\n    session\n  }) {\n    if (!isSignedIn({\n      session\n    })) {\n      return false;\n    } // 1 do they have permission of canManageCart\n\n\n    if (permissions.canManageCart({\n      session\n    })) {\n      return true;\n    } // 2 if not do they own this item?\n\n\n    return {\n      user: {\n        id: session.itemId\n      }\n    };\n  },\n\n  canManageOrderItems({\n    session\n  }) {\n    if (!isSignedIn({\n      session\n    })) {\n      return false;\n    } // 1 do they have permission of canManageCart\n\n\n    if (permissions.canManageCart({\n      session\n    })) {\n      return true;\n    } // 2 if not does the owner of the order also own the item\n\n\n    return {\n      order: {\n        user: {\n          id: session.itemId\n        }\n      }\n    };\n  },\n\n  canReadProducts({\n    session\n  }) {\n    if (permissions.canManageProducts({\n      session\n    })) {\n      return true; // can read everything\n    } // otherwise they should only see available products (based on status field)\n\n\n    return {\n      status: 'AVAILABLE'\n    };\n  },\n\n  canManageUsers({\n    session\n  }) {\n    if (!isSignedIn({\n      session\n    })) {\n      return false;\n    } // 1 do they have permission of canManageUsers\n\n\n    if (permissions.canManageUsers({\n      session\n    })) {\n      return true;\n    } // 2 otherwise may only update themselves\n\n\n    return {\n      id: session.itemId\n    };\n  }\n\n};","map":null,"metadata":{},"sourceType":"module"}